/* 
* Copyright (C) 2020-2021 German Aerospace Center (DLR-SC)
*
* Authors: Martin Siggel, Daniel Abele, Martin J. Kuehn, Jan Kleinert
*
* Contact: Martin J. Kuehn <Martin.Kuehn@DLR.de>
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

${includes}

namespace py = pybind11;

${pretty_name}

PYBIND11_MODULE(_simulation_${pymio_name}, m)
{
    ${enum_population_states}

    ${indexing}

    pymio::bind_ParameterSet<${namespace}ParametersBase>(m, "ParametersBase");

    pymio::bind_Population${population_template_arguments}(m, "Population");

    using Populations = mio::Populations{population_template_arguments};
    pymio::bind_CompartmentalModel<Populations, ${namespace}ParametersBase>(m, "ModelBase");
    py::class_<${model_class}, mio::CompartmentalModel<Populations, ${namespace}ParametersBase>>(m, "${model_cpp_name}")
    ${model_init}

    m.def(
        "simulate",
        [](double t0, double tmax, double dt, const ${model_class}& model) {
            return mio::simulate(t0, tmax, dt, model);
        },
        "Simulates a ${model_cpp_name} from t0 to tmax.", py::arg("t0"), py::arg("tmax"), py::arg("dt"), py::arg("model"));

    m.attr("__version__") = "dev";
}
