name: "Linux Build"
description: "Build the C++ library on Linux. Produces artifact build-cpp-linux-$compiler-$version-$config."
inputs:
  config:
    description: "Configuration to build (Release or Debug, see CMAKE_BUILD_TYPE)"
    required: true
    default: "Release"
  compiler:
    description: "Compiler to use (clang or gcc)."
    required: true
    default: "gcc"
  version:
    description: "Version of the compiler to use (min or latest)."
    required: true
    default: "latest"
  optional-dependencies:
    description: "Build the library with optional dependencies (ON or OFF, default ON). If OFF, adds `-nodep` to the artifact name"
    required: false
    default: "ON"
  coverage:
    description: "Turn coverage on (ON or OFF, default OFF)"
    required: false
    default: "OFF"
  sanitize-ub:
    description: "Turn on UB sanitzer (ON or OFF, default OFF)"
    required: false
    default: "OFF"
  sanitize-addr:
    description: "Turn on address sanitzer (ON or OFF, default OFF)"
    required: false
    default: "OFF"
  build-tests:
    description: "Build tests"
    required: false
    default: "ON"
  build-benchmarks:
    description: "Build benchmarks"
    required: false
    default: "OFF"
  openmp:
    description: "Enable Multithreading with OpenMP (ON or OFF, default OFF). If ON, adds `-omp` to the name of the artifact."
    required: false
    default: "OFF"
  enable-optimization:
    description: "Enable optimization with Ipopt (ON or OFF, default ON)"
    required: false
    default: "ON"
runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq -y install lcov ccache
        if [[ "${{ inputs.optional-dependencies }}" == "ON" ]]; then
          sudo apt-get -qq -y install libhdf5-dev 
        fi
        if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
          if [[ "${{ inputs.version }}" == "min" ]]; then
            sudo apt-get -qq -y install gcc-9
            sudo apt-get -qq -y install g++-9
          else        
            sudo apt-get -qq -y install gcc-11
            sudo apt-get -qq -y install g++-11
          fi
        elif [[ "${{ inputs.compiler }}" == "clang" ]]; then
          if [[ "${{ inputs.version }}" == "min" ]]; then
            sudo apt-get -qq -y install clang-6.0
          else
            sudo apt-get -qq -y install clang-14
          fi
        fi
    - name: ccache
      id: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        save: ${{ github.ref_name == 'main' || github.ref_name == '994/merge' || github.ref_name == '305-ccache-in-CI' }} # only save on main branch to minimize space
        key: linux-${{ inputs.compiler }}-${{ inputs.version }}-${{ inputs.config }}${{ inputs.optional-dependencies == 'OFF' && '-nodep' || ''}}${{ inputs.openmp == 'ON' && '-omp' || ''}}
        restore-keys: linux-${{ inputs.compiler }}-${{ inputs.version }}-${{ inputs.config }}${{ inputs.optional-dependencies == 'OFF' && '-nodep' || ''}}${{ inputs.openmp == 'ON' && '-omp' || ''}}
    - name: Build
      shell: bash
      run: |
        cd cpp
        export CCACHE_LOGFILE=$(pwd)/.ccache.log
        export CCACHE_DEBUG=1
        export CCACHE_DEBUGDIR=$(pwd)/.ccache.debugdir
        if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
          if [[ "${{ inputs.version }}" == "min" ]]; then
            export CC=/usr/bin/gcc-9
            export CXX=/usr/bin/g++-9
          else        
            export CC=/usr/bin/gcc-11
            export CXX=/usr/bin/g++-11
          fi
        elif [[ "${{ inputs.compiler }}" == "clang" ]]; then
          if [[ "${{ inputs.version }}" == "min" ]]; then
            export CC=/usr/bin/clang-6.0
            export CXX=/usr/bin/clang++-6.0
          else        
            export CC=/usr/bin/clang-14
            export CXX=/usr/bin/clang++-14
          fi
        else
          echo "unknown value for action input: compiler"
          exit 1
        fi
        mkdir -p build && cd build
        cmake -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ inputs.config }} -DMEMILIO_BUILD_TESTS=${{ inputs.build-tests }} -DMEMILIO_BUILD_BENCHMARKS=${{ inputs.build-benchmarks }} -DMEMILIO_ENABLE_IPOPT=${{ inputs.enable-optimization }} -DMEMILIO_TEST_COVERAGE=${{ inputs.coverage }} -DMEMILIO_SANITIZE_ADDRESS=${{ inputs.sanitize-addr }} -DMEMILIO_SANITIZE_UNDEFINED=${{ inputs.sanitize-ub }} -DMEMILIO_USE_BUNDLED_JSONCPP=${{ inputs.optional-dependencies }} -DMEMILIO_ENABLE_OPENMP=${{ inputs.openmp }} ..
        make -j4
    - name: create build dir archive
      shell: bash
      run: |
        cd cpp
        tar -czf build.tar.gz build
    - name: Upload built directory
      uses: actions/upload-artifact@v4
      with:
        #artifacts in one pipeline must have a different name, so options must add a suffix to the artifact name if different values are used in the same pipeline
        name: build-cpp-linux-${{ inputs.compiler }}-${{ inputs.version }}-${{ inputs.config }}${{ inputs.optional-dependencies == 'OFF' && '-nodep' || ''}}${{ inputs.openmp == 'ON' && '-omp' || ''}}
        path: cpp/build.tar.gz
        retention-days: 1
    - name: Upload ccache log
      uses: actions/upload-artifact@v4
      with:
        name: ccachelog-${{ inputs.compiler }}-${{ inputs.version }}-${{ inputs.config }}${{ inputs.optional-dependencies == 'OFF' && '-nodep' || ''}}${{ inputs.openmp == 'ON' && '-omp' || ''}}
        path: cpp/.ccache.log
        retention-days: 1
    - name: Upload ccache debugdir
      uses: actions/upload-artifact@v4
      with:
        name: ccachedebug-${{ inputs.compiler }}-${{ inputs.version }}-${{ inputs.config }}${{ inputs.optional-dependencies == 'OFF' && '-nodep' || ''}}${{ inputs.openmp == 'ON' && '-omp' || ''}}
        path: cpp/.ccache.debugdir
        retention-days: 1
