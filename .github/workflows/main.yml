name: CI

on: 
  schedule:
    - cron: "40 2 * * *"
  push:
    branches:
      - '**'
    tags:
      - version-*
  pull_request:

jobs:
  build-cpp-gcc:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/gcc-build
        with: 
          config: "Release"

  build-cpp-gcc-dbg:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/gcc-build
        with: 
          config: "Debug"
          coverage: "ON"
          sanitize-ub: "ON"
          sanitize-addr: "ON"

  build-cpp-clang:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/clang-build
        with: 
          config: "Release"

  build-cpp-clang-dbg:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/clang-build
        with: 
          config: "Debug"

  build-cpp-msvc:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/msvc-build
        with:
          config: "Release"

  build-cpp-msvc-dbg:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/msvc-build
        with:
          config: "Debug"

  test-cpp-gcc:
    needs: build-cpp-gcc
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/linux-test
        with: 
          build-artefact: build-cpp-linux-gcc-Release

  test-cpp-gcc-dbg:
    needs: build-cpp-gcc-dbg
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/linux-test
        with: 
          coverage: "ON"
          build-artefact: build-cpp-linux-gcc-Debug

  test-cpp-win:
    needs: build-cpp-msvc
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download built test directory
        uses: actions/download-artifact@v2
        with:
          name: build-tests-windows-Debug
          path: cpp/build-win/tests
      - name: Run unit tests
        run: |
          cd cpp/build-win/tests
          .\runUnitTests.exe --gtest_output="xml:report.xml"
      - name: Upload report
        uses: actions/upload-artifact@v2
        with:
          name: test-cpp-win-report
          path: |
            cpp/build-win/tests/report.xml
          retention-days: 1

  build-py:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_x86_64
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: yum install ninja-build -qy
      - name: Build Python Wheels
        run: |
          cd pycode
          /opt/python/cp36-cp36m/bin/python setup.py bdist_wheel
          /opt/python/cp37-cp37m/bin/python setup.py bdist_wheel
          /opt/python/cp38-cp38/bin/python setup.py bdist_wheel
          for whl in dist/*.whl; do auditwheel repair "$whl"; done
      - name: Upload Python Wheels
        uses: actions/upload-artifact@v2
        with:
          name: python-wheels
          path: pycode/wheelhouse
          
  test-docs:
    needs: build-py
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq -y install doxygen
      - name: Create documentation
        run: |
          cd docs
          doxygen
      - name: Upload Documentation
        uses: actions/upload-artifact@v2
        with:
          name: documentation
          path: docs/html
          retention-days: 3

  test-py:
    needs: build-py
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq -y install python3-pip gnupg
          python -m pip install --upgrade pip
      - name: Download Python Wheels
        uses: actions/download-artifact@v2
        with:
          name: python-wheels
          path: pycode/wheelhouse
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Install Python Wheels
        run: |
          for pkg in `ls pycode/wheelhouse/*36*.whl`; do python -m pip install $pkg; done
          pip install -r pycode/requirements-dev.txt
      - name: Run unit tests
        run: |
          cd pycode/test
          python -W ignore::DeprecationWarning -m coverage run --include=*site-packages/epidemiology*,*dist-packages/epidemiology*,epidemiology* -m unittest
          python -m coverage report
          python -m coverage xml -o coverage_python.xml
          python -m coverage html -d coverage_python
          cp -r coverage_python ../../
          getrkidata --help
          getpopuldata --help
          getjhdata --help
          getdividata --help
          getsimdata --help
          cleandata --help
      - name: Upload coverage reports
        uses: actions/upload-artifact@v2
        with:
          name: test-py-coverage-reports
          path: |
            pycode/test/coverage_python.xml
            coverage_python/
          retention-days: 1

  test-pylint:
    needs: build-py
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq -y install python3-pip gnupg
          python -m pip install --upgrade pip
      - name: Download Python Wheels
        uses: actions/download-artifact@v2
        with:
          name: python-wheels
      - name: Install Python Wheels
        run: |
          for pkg in `ls pycode/wheelhouse/*36*.whl`; do python -m pip install $pkg; done
          pip install -r pycode/requirements-dev.txt
      - name: Run pylint
        run: |
          cd pycode
          mkdir -p build_pylint
          pip install pylint
          pip install pylint-json2html
          python setup.py pylint
          pylint-json2html -f jsonextended -o build_pylint/pylint.html < build_pylint/pylint_extended.json
      - name: Upload Pylint Report
        uses: actions/upload-artifact@v2
        with:
          name: pylint-report
          path: pycode/build_pylint/pylint.html
          retention-days: 3

  dowload-data:
    needs: build-py
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq -y install python3-pip gnupg
          python -m pip install --upgrade pip
      - name: Download Python Wheels
        uses: actions/download-artifact@v2
        with:
          name: python-wheels
          path: pycode/wheelhouse
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Install Python Wheels
        run: |
          for pkg in `ls pycode/wheelhouse/*36*.whl`; do python -m pip install $pkg; done
      - name: Dowload Data
        run: |
          mkdir -p data_dl
          getrkidata -o data_dl
          getpopuldata -o data_dl
          getjhdata -o data_dl
          getdividata -o data_dl
      - name: Upload Data
        uses: actions/upload-artifact@v2
        with:
          name: data
          path: |
            data_dl/*.json
            data_dl/Germany/*.json
            data_dl/Spain/*.json
            data_dl/France/*.json
            data_dl/Italy*.json
            data_dl/SouthKorea/*.json
            data_dl/US/*.json
            data_dl/China/*.json
          retention-days: 1
          
  codecov:
    needs: [test-py, test-cpp-gcc-dbg]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq -y install git curl
      - name: Download python coverage report
        uses: actions/download-artifact@v2
        with:
          name: test-py-coverage-reports
      - name: Download cpp coverage report
        uses: actions/download-artifact@v2
        with:
          name: test-cpp-coverage-reports
      - name: Deploy to codecov.io
        uses: codecov/codecov-action@v2
        with:
          files: ./pycode/test/coverage_python.xml,./coverage.xml
          verbose: true

  pages:
    needs: [test-py, test-cpp-gcc-dbg, test-docs, test-pylint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq -y install git
      - name: Download python coverage report
        uses: actions/download-artifact@v2
        with:
          name: test-py-coverage-reports
      - name: Download cpp coverage report
        uses: actions/download-artifact@v2
        with:
          name: test-cpp-coverage-reports
      - name: Download documentation
        uses: actions/download-artifact@v2
        with:
          name: documentation
          path: docs/html
      - name: Download pylint report
        uses: actions/download-artifact@v2
        with:
          name: pylint-report
          path: pycode/build_pylint
      - name: Prepare basic Pages sites
        run: |
          mkdir -p public
          cp ci_index/main_index.html public/index.html
          cp ci_index/branch_index.html public/index.html
      - name: Prepare documentation
        run: |
          mkdir -p public/documentation
          cp -r docs/html/* public/documentation
      - name: Prepare pylint reports
        run: |
          mkdir -p public/pylint
          cp pycode/build_pylint/pylint.html public/pylint/
      - name: Prepare coverage reports
        run: |
          mkdir -p public/coverage
          mkdir -p public/coverage/cpp
          mkdir -p public/coverage/python
          cp -r coverage_python/* public/coverage/python/
          cp -r coverage_report/* public/coverage/cpp/
      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public

