build-cpp:
  stage: build
  tags:
    - docker
  image: conanio/gcc72
  before_script:
    - echo 'deb http://download.opensuse.org/repositories/science:/dlr/xUbuntu_16.04/ /' | sudo tee /etc/apt/sources.list.d/science:dlr.list
    - wget -O - https://download.opensuse.org/repositories/science:dlr/xUbuntu_16.04/Release.key  | sudo apt-key add -
    - sudo apt -qq update
    - sudo apt -qq -y install libhdf5-dev libtixi3-dev lcov
  script:
    - cd cpp
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-std=c++14 -pedantic" -DEPI_BUILD_EPI_IO=ON -DEPI_TEST_COVERAGE=ON ..
    - make -j
  artifacts:
    expire_in: 2 hrs
    paths:
      - cpp/build/

# build-cpp-win:
#   stage: build
#   tags:
#     - SC-0030VM
#   before_script:
#     - $env:Path = "c:\Windows\System32"
#     - $env:Path += ";c:\Devel\Tools\cmake-3.18.3-win64-x64\bin"
#     - $env:Path += ";c:\Program Files\7-zip"
#     - $env:Path += ";c:\Devel\Tools\ninja-1.10.1"
#     - md -Force C:\Devel\Libraries\
#     - ci\activate_vc2019.ps1
#     - If (!(Test-Path -Path "c:\Devel\Libraries\TIXI-3.1.1-win64")) {
#         Write-Output "Downloading TiXI libraries";
#         (new-object System.Net.WebClient).Downloadfile("https://github.com/DLR-SC/tixi/releases/download/v3.1.1/TIXI-3.1.1-win64.zip", "c:\Devel\Libraries\TIXI-3.1.1-win64.zip");
#         Write-Output "Extract TiXI libraries";
#         7z x -y "c:\Devel\Libraries\TIXI-3.1.1-win64.zip" -oC:\Devel\Libraries
#       }
#   script:
#     - cd cpp
#     - md -Force build-win
#     - cd build-win
#     - cmake --version
#     - cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DEPI_USE_BUNDLED_EIGEN=ON -DEPI_BUILD_EPI_IO=ON -DHDF5_USE_STATIC_LIBRARIES=ON -DHDF5_DIR=C:\Devel\Libraries\HDF5-1.10.1-win64\cmake -Dtixi3_DIR=C:\Devel\Libraries\TIXI-3.1.1-win64\lib\tixi3 ..
#     - cp "c:\Devel\Libraries\TIXI-3.1.1-win64\bin\tixi3.dll" "tests"
#     - cmake --build .
#   artifacts:
#     expire_in: 2 hrs
#     paths:
#       - cpp/build-win/

build-py:
  tags:
   - docker
  image: quay.io/pypa/manylinux2014_x86_64
  stage: build
  before_script:
    - yum install ninja-build -qy
    - cd pycode
  script:
    - /opt/python/cp36-cp36m/bin/python setup.py bdist_wheel
    - /opt/python/cp37-cp37m/bin/python setup.py bdist_wheel
    - /opt/python/cp38-cp38/bin/python setup.py bdist_wheel
    - for whl in dist/*.whl; do auditwheel repair "$whl"; done
  artifacts:
    paths:
      - pycode/wheelhouse/*.whl

build-py-win:
  tags:
    - SC-0030VM
  stage: build
  before_script:
    - ci\activate_vc2019.ps1
    - cd pycode
    - C:\Devel\Lang\Python-3.7-win64\python.exe -m venv venv37
    - C:\Devel\Lang\Python-3.8-win64\python.exe -m venv venv38
  script:
    - venv38\Scripts\activate
    - python setup.py bdist_wheel
    - deactivate
    - venv37\Scripts\activate
    - python setup.py bdist_wheel
    - deactivate
  after_script:
    - cd pycode
    - Remove-Item -path venv37 -recurse
    - Remove-Item -path venv38 -recurse
  artifacts:
    paths:
      - pycode/dist/*.whl

test-docs:
  tags:
    - docker
  image: ubuntu:18.04
  stage: test
  dependencies:
    - build-py
  before_script:
    - apt -qq update
    - apt -qq -y install doxygen
  script:
    - cd docs
    - doxygen
  artifacts:
    expose_as: "Documentation"
    paths:
      - docs/html/
    expire_in: 3 day


# run tests using the binary built before
test-cpp:
  tags:
    - docker
  image: ubuntu:18.04
  stage: test
  before_script:
    - apt -qq update
    - apt -qq -y install libhdf5-cpp-100 wget gnupg
    - echo 'deb http://download.opensuse.org/repositories/science:/dlr/xUbuntu_18.04/ /' | tee /etc/apt/sources.list.d/science:dlr.list
    - wget -O - https://download.opensuse.org/repositories/science:dlr/xUbuntu_18.04/Release.key  | apt-key add -
    - apt -qq update
    - apt -qq -y install libtixi3 g++ python3-pip
    - python3 -m pip install gcovr
  dependencies:
    - build-cpp
  script:
    - cd cpp/build/tests
    - ./runUnitTests  --gtest_output="xml:report.xml"
    - cd ../../../
    - gcovr -f cpp/epidemiology
    - gcovr -f cpp/epidemiology --xml -o coverage.xml
    - mkdir coverage_report && cd coverage_report
    - gcovr -r .. -f ../cpp/epidemiology --exclude-throw-branches --html --html-details -o index.html
  artifacts:
    reports:
      junit: cpp/build/tests/report.xml
      cobertura: coverage.xml
    expose_as: "CPP Coverage Report"
    paths:
      - coverage_report/
    expire_in: 1 week

# run tests using the binary built before
# test-cpp-win:
#   tags:
#     - SC-0030VM
#   stage: test
#   dependencies:
#     - build-cpp-win
#   script:
#     - cd cpp/build-win/tests
#     - .\runUnitTests.exe --gtest_output="xml:report.xml"
#   artifacts:
#     reports:
#       junit: cpp/build-win/tests/report.xml

test-py:
  tags:
    - docker
  image: ubuntu:18.04
  stage: test
  dependencies:
    - build-py
  before_script:
    - apt -qq update
    - apt -qq -y install python3-pip gnupg
    - python3.6 -m pip install --upgrade pip
    - for pkg in `ls pycode/wheelhouse/*36*.whl`; do python3.6 -m pip install $pkg; done
    - pip install -r pycode/requirements-dev.txt
  script:
    - cd pycode/test
    - python3 -W ignore::DeprecationWarning -m coverage run --include=*site-packages/epidemiology*,*dist-packages/epidemiology*,epidemiology* -m unittest
    - python3 -m coverage report
    - python3 -m coverage xml -o coverage_python.xml
    - python3 -m coverage html -d coverage_python
    - mv coverage_python ../../
    - getrkidata --help
    - getpopuldata --help
    - getjhdata --help
    - getspaindata --help
    - getdividata --help
    - getsimdata --help
    - cleandata --help
  artifacts:
    reports:
      cobertura: pycode/test/coverage_python.xml
    expose_as: "Python Coverage Report"
    paths:
      - coverage_python/
    expire_in: 3 day

test-pylint:
  tags:
    - docker
  image: ubuntu:18.04
  stage: test
  dependencies:
    - build-py
  before_script:
    - apt -qq update
    - apt -qq -y install python3-pip gnupg
    - python3.6 -m pip install --upgrade pip
    - for pkg in `ls pycode/wheelhouse/*36*.whl`; do python3.6 -m pip install $pkg; done
    - pip install -r pycode/requirements-dev.txt
  script:
    - cd pycode
    - mkdir -p build_pylint
    - pip install pylint
    - pip install pylint-json2html
    - python3.6 setup.py pylint
    - pylint-json2html -f jsonextended -o build_pylint/pylint.html < build_pylint/pylint_extended.json
  artifacts:
    expose_as: "Pylint Report"
    paths:
      - pycode/build_pylint/pylint.html
    expire_in: 3 day


download-data:
  tags:
    - docker
  image: ubuntu:18.04
  stage: test
  dependencies:
    - build-py
  before_script:
    - apt -qq update
    - apt -qq -y install python3-pip
    - python3 -m pip install --upgrade pip
    - for pkg in `ls pycode/wheelhouse/*36*.whl`; do python3.6 -m pip install $pkg; done
  script:
    - mkdir data_dl
    - getrkidata -o data_dl
    - getpopuldata -o data_dl
    - getjhdata -o data_dl
    - getspaindata -o data_dl
    - getdividata -o data_dl
  allow_failure: true
  artifacts:
    paths:
      - data_dl/*.json
      - data_dl/Germany/*.json
      - data_dl/Spain/*.json
      - data_dl/France/*.json
      - data_dl/Italy*.json
      - data_dl/SouthKorea/*.json
      - data_dl/US/*.json
      - data_dl/China/*.json
  only:
     - master
     - 449-fix-not-working-data-download

build-js:
  tags:
   - docker
  image: node:12
  stage: build
  before_script:
    - cd frontend
    - npm install
  script:
    - echo "Building app deployment"
    - npm run build
    - echo "Building done"
  artifacts:
    paths:
      - frontend/build/

test-js:
  tags:
   - docker
  image: node:12
  stage: test
  needs: ['build-js']
  before_script:
    - cd frontend
    - npm install
  script:
    - npm run coverage
  artifacts:
    reports:
      junit: frontend/coverage/junit/junit.xml
      cobertura: frontend/coverage/cobertura-coverage.xml
    paths:
      - frontend/coverage/lcov-report
    
www:
  tags:
    - native
    - hpcagainstcorona
  stage: deploy
  dependencies:
    - build-js
    - download-data
  script:
    - echo "Deploying to server"
    - cp -rv frontend/build/* /var/www/html
    - cp -v data_dl/Germany/*_rki.json /var/www/html/assets
    - echo "Deployed"
  only:
    - /^version-.*$/

#######################
# Publish stage
pages:
  stage: deploy
  dependencies:
    - test-py
    - test-cpp
    - test-docs
    - test-pylint
  tags:
    - docker
  image: ubuntu:18.04
  script:
    - echo "Prepare basic Pages sites"
    - mkdir -p public/${CI_COMMIT_REF_NAME}/
    - cp ci_index/main_index.html public/index.html
    - cp ci_index/branch_index.html public/${CI_COMMIT_REF_NAME}/index.html
    - echo "Prepare documentation" # Prepare documentation
    - mkdir -p public/${CI_COMMIT_REF_NAME}/documentation
    - cp -r docs/html/* public/${CI_COMMIT_REF_NAME}/documentation
    - echo "Prepare pylint reports" # Prepare pylint
    - mkdir -p public/${CI_COMMIT_REF_NAME}/pylint
    - cp pycode/build_pylint/pylint.html public/${CI_COMMIT_REF_NAME}/pylint/
    - echo "Prepare coverage reports" # prepare coverage
    - mkdir -p public/${CI_COMMIT_REF_NAME}/coverage
    - mkdir -p public/${CI_COMMIT_REF_NAME}/coverage/cpp
    - mkdir -p public/${CI_COMMIT_REF_NAME}/coverage/python
    - cp -r coverage_python/* public/${CI_COMMIT_REF_NAME}/coverage/python/
    - cp -r coverage_report/* public/${CI_COMMIT_REF_NAME}/coverage/cpp/
  artifacts:
    paths:
      - public # All relevant content needs to be available here
  only:
     - master
  
