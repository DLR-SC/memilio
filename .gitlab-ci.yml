build-cpp:
  stage: build
  tags:
    - docker
    - hpcagainstcorona
  image: ubuntu_18.04_devel
  before_script:
    - echo 'deb http://download.opensuse.org/repositories/science:/dlr/xUbuntu_18.04/ /' | tee /etc/apt/sources.list.d/science:dlr.list
    - wget -O - https://download.opensuse.org/repositories/science:dlr/xUbuntu_18.04/Release.key  | apt-key add -
    - apt -qq update
    - apt -qq -y install libeigen3-dev libhdf5-dev libtixi3-dev
  script:
    - cd cpp
    - mkdir build && cd build
    - cmake -G Ninja -DEPI_USE_BUNDLED_EIGEN=OFF -DEPI_BUILD_EPI_IO=ON ..
    - cmake --build .
  artifacts:
    expire_in: 2 hrs
    paths:
      - cpp/build/

build-py:
  tags:
   - docker
  image: quay.io/pypa/manylinux2010_x86_64
  stage: build
  before_script:
    - yum install ninja-build -qy
    - cd pycode
  script:
    - /opt/python/cp36-cp36m/bin/python setup.py bdist_wheel
    - /opt/python/cp37-cp37m/bin/python setup.py bdist_wheel
    - /opt/python/cp38-cp38/bin/python setup.py bdist_wheel
    - for whl in dist/*.whl; do auditwheel repair "$whl"; done
  artifacts:
    paths:
      - pycode/wheelhouse/*.whl

# run tests using the binary built before
test-cpp:
  tags:
    - docker
  image: ubuntu:18.04
  stage: test
  before_script:
    - apt -qq update
    - apt -qq -y install libhdf5-cpp-100 wget gnupg
    - echo 'deb http://download.opensuse.org/repositories/science:/dlr/xUbuntu_18.04/ /' | tee /etc/apt/sources.list.d/science:dlr.list
    - wget -O - https://download.opensuse.org/repositories/science:dlr/xUbuntu_18.04/Release.key  | apt-key add -
    - apt -qq update
    - apt -qq -y install libtixi3
  dependencies:
    - build-cpp
  script:
    - cd cpp/build/tests
    - ./runUnitTests --gtest_output="xml:report.xml"
  artifacts:
    reports:
      junit: cpp/build/tests/report.xml

test-py:
  tags:
    - docker
  image: ubuntu:18.04
  stage: test
  dependencies:
    - build-py
  before_script:
    - apt -qq update
    - apt -qq -y install python3-pip gnupg
    - python3.6 -m pip install --upgrade pip
    - for pkg in `ls pycode/wheelhouse/*36*.whl`; do python3.6 -m pip install $pkg; done
    - pip install pyfakefs
  script:
    - cd pycode/test
    - python3 -m unittest
    - getrkidata --help
    - getpopuldata --help
    - getjhdata --help
    - getspaindata --help
    - getalldata --help
    - cleandata --help

download-data:
  tags:
    - docker
  image: ubuntu:18.04
  stage: test
  dependencies:
    - build-py
  before_script:
    - apt -qq update
    - apt -qq -y install python3-pip
    - python3 -m pip install --upgrade pip
    - for pkg in `ls pycode/wheelhouse/*36*.whl`; do python3.6 -m pip install $pkg; done
  script:
    - mkdir data_dl
    - getrkidata -o data_dl
    - getpopuldata -o data_dl
    - getjhdata -o data_dl
    - getspaindata -o data_dl
  artifacts:
    paths:
      - data_dl/*.json
      - data_dl/Germany/*.json
      - data_dl/Spain/*.json
      - data_dl/France/*.json
      - data_dl/Italy*.json
      - data_dl/SouthKorea/*.json
      - data_dl/US/*.json
      - data_dl/China/*.json

build-js:
  tags:
    - docker
  image: node:12
  stage: build
  before_script:
    - cd frontend
    - npm install
  script:
    - echo "Building app deployment"
    - npm run build
    - echo "Building done"
  artifacts:
    paths:
      - frontend/build/

build-js-bindings:
  stage: build
  tags:
   - docker
  image: trzeci/emscripten
  script:
  - cd frontend
  - mkdir build && cd build
  - emcmake cmake ..
  - cmake --build .
  artifacts:
    paths:
    - frontend/build/secirjs.js
    - frontend/build/secirjs.wasm

www:
  tags:
    - native
    - hpcagainstcorona
  stage: deploy
  dependencies:
    - build-js
    - build-js-bindings
    - download-data
  script:
    - echo "Deploying to server"
    - cp -rv frontend/build/* /var/www/html
    - cp -v data_dl/Germany/*_rki.json /var/www/html/assets
    - echo "Deployed"
  only:
    - /^version-.*$/
